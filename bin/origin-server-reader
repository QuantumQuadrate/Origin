#!/usr/bin/env python
"""
..module::MonServer
  :synopsis: Module encapsulating the Server var

..moduleauthor:: Ian Wisher <ianwisher@gmail.com> & John Pretz <john.pretz@gmail.com> for the HAWC Collaberation

The :mon:`origin.server.monserver` Module
===============================================================================

This module provides the MonServer class that holds all the basic methods for
running the monitorig server.

ZMQ IOLoop draws heavily from:
http://learning-0mq-with-pyzmq.readthedocs.org/en/latest/pyzmq/multisocket/tornadoeventloop.html

"""

import sys
import os
import ConfigParser
import logging
import threading

import zmq
from zmq.eventloop import ioloop
from zmq.eventloop.zmqstream import ZMQStream

from origin.server import MonServer


def main():
    fullBinPath = os.path.abspath(os.path.join(os.getcwd(), sys.argv[0]))
    fullBasePath = os.path.dirname(os.path.dirname(fullBinPath))
    fullVarPath = os.path.join(fullBasePath, "var")
    fullCfgPath = os.path.join(fullBasePath, "config")

    if len(sys.argv) > 1:
        if sys.argv[1] == 'test':
            configfile = os.path.join(fullCfgPath, "origin-server-test.cfg")
        else:
            configfile = os.path.join(fullCfgPath, sys.argv[1])
    else:
        configfile = os.path.join(fullCfgPath, "origin-server.cfg")

    config = ConfigParser.ConfigParser()
    config.read(configfile)
    # add base path to config object since we wont know it until we run
    config.set('Server', 'base_path', fullBasePath)
    config.set('Server', 'var_path',  fullVarPath)

    if not os.path.exists(fullVarPath):
        os.mkdir(fullVarPath)

    logger = logging.getLogger('Monitor')
    logger.setLevel(logging.INFO)

    # Add Console logger
    cLog = logging.StreamHandler()
    cLog.setLevel(logging.INFO)
    formatter = logging.Formatter('%(levelname)s - %(message)s')
    cLog.setFormatter(formatter)
    logger.addHandler(cLog)

    # Add File logger
    fLog = logging.FileHandler("{}/READER.log".format(fullVarPath))
    fLog.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fLog.setFormatter(formatter)
    logger.addHandler(fLog)
    logger.info("Successfully Started Logging")

    logger.info("Current directory: {}".format(os.getcwd()))

    read_addr = "tcp://*"
    read_port = config.getint("Server", "read_port")

    context = zmq.Context.instance()

    # Setup Server
    mon = MonServer(logger, config)

    # READ FORMAT ########################################################
    read_socket = context.socket(zmq.REP)
    read_socket.bind("{}:{}".format(read_addr, read_port))
    read_socket = ZMQStream(read_socket)
    read_socket.on_recv_stream(mon.processReadMsg)

    logger.info("Reader Server IOLoop Configured")

    # Start the event loop
    ioloop.IOLoop.instance().start()


if __name__ == "__main__":
    main()
