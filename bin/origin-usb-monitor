#!/usr/bin/env python

import sys
import os
fullBinPath=os.path.abspath(os.getcwd() + "/" + sys.argv[0])
fullLibPath=os.path.abspath(os.path.dirname(os.path.dirname(fullBinPath))+"/lib")
sys.path.append(fullLibPath)
import time

import random
import calendar
import time
import sys

import origin
if len(sys.argv) > 1:
  configBundle = sys.argv[1]
  origin.configure(configBundle)
else:
  origin.configure("site")


from origin.client import monitoring_record
from origin.client import server
from origin.client import server_connection
from origin import current_time, timestamp
#Create usb interface
from devices import originIO
io = originIO.originIO()


# just a proxy for actually doing something useful
def makeTempMeasurement():
    return random.random()

# something that represents the connection to the server
# might need arguments.... idk
serv = server()




# perhaps print some useful message. Perhaps try to reconnect....
# print "problem establishing connection to server..."
# sys.exit(1)


# This might need to be more complicated, but you get the gist. Keep sending records forever

while True:
    print "sending...."
    usb_device_info = io.get_all_devices_info()
    print("Number of detected devices: ")
    print(len(usb_device_info))
    for usb_device in usb_device_info:
        #print(usb_device)
        brand = usb_device['brand']
        type  = usb_device['type']
        serial = usb_device['serial']
        stream_name = usb_device['name']
        if stream_name == '':
            stream_name = brand+'_'+type+'_'+serial
            
        print(stream_name)
        # this should be changed to not reregister everytime
        connection = serv.registerStream(
          stream=stream_name.encode("ascii"),
          records={ 'set_point':'float',
                    'sensor':'float',
                    'V':'float',
                    'I':'float'})
        record = {
        'set_point':float(usb_device['set_point']),
        'sensor'   :float(usb_device['sensor']),
        'V'        :float(usb_device['V']),
        'I'        :float(usb_device['I'])
        }
        #time.sleep(1)
        record['timestamp'] = current_time(origin.config)
        connection.send(**record)
    time.sleep(60*10)
