#!/usr/bin/env python

import sys
import os
import random
import time
import zmq
import json

# first find ourself
fullBinPath  = os.path.abspath(os.getcwd() + "/" + sys.argv[0])
fullBasePath = os.path.dirname(os.path.dirname(fullBinPath))
fullLibPath  = os.path.join(fullBasePath, "lib")
fullCfgPath  = os.path.join(fullBasePath, "config")
sys.path.append(fullLibPath)

from origin.client import server, random_data

if len(sys.argv) > 1:
  if sys.argv[1] == 'test':
    configfile = os.path.join(fullCfgPath, "origin-server-test.cfg")
  else:
    configfile = os.path.join(fullCfgPath, sys.argv[1])
else:
  configfile = os.path.join(fullCfgPath, "origin-server.cfg")

import ConfigParser
config = ConfigParser.ConfigParser()
config.read(configfile)

context = zmq.Context()
socket = context.socket(zmq.REQ)
host = config.get('Server','ip')
port = config.getint('Server','read_port')
socket.connect("tcp://%s:%s" % (host,port))

stream_test_list = ['toy', ' toy_dtype_test1', ' toy_dtype_test2', 'noTimeTest']

time.sleep(5)

while True:
    for stream in stream_test_list:
        print "sending read request for stream `{}`....".format(stream)
        request_obj = { 'stream': stream }
        socket.send(json.dumps(request_obj))
        response = socket.recv()
        print "sever responds with: "
        print response
        print "+"*80
        time.sleep(3)
    for stream in stream_test_list:
        print "sending raw read request for stream `{}`....".format(stream)
        request_obj = { 'stream': stream, 'raw': True } 
        socket.send(json.dumps(request_obj))
        response = socket.recv()
        print "sever responds with: "
        print response
        print "+"*80
        time.sleep(3)
    time.sleep(60)
