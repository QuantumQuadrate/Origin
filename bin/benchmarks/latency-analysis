#!/usr/bin/env python

import sys
import os
import random
import time
import zmq
import json
import numpy as np
import pprint

# first find ourself
fullBinPath  = os.path.abspath(os.getcwd() + "/" + sys.argv[0])
fullBasePath = os.path.dirname(os.path.dirname(os.path.dirname(fullBinPath)))
fullLibPath  = os.path.join(fullBasePath, "lib")
fullCfgPath  = os.path.join(fullBasePath, "config")
print(fullBasePath)
sys.path.append(fullLibPath)

from origin.client import server
from origin import current_time, TIMESTAMP

configfile = os.path.join(fullCfgPath, "origin-server.cfg")

import ConfigParser
config = ConfigParser.ConfigParser()
config.read(configfile)

context = zmq.Context()
socket = context.socket(zmq.REQ)
host = '52.25.173.118'
port = config.get('Server','read_port')
socket.connect("tcp://%s:%s" % (host,port))

time.sleep(1)

STREAM_NAME = 'latency_sub_mysql'
print "sending read request for stream: `{}`....".format(STREAM_NAME)
# these come from output of data producer script
start64 = 6425782978850376704
stop64 = 6425782980205031424
start = long(float(start64)/2**32)
#stop = long((6424137845818268672.0/2**32)+1) # get all the data
request_obj = { 'stream': STREAM_NAME, 'raw': True, 'start': start}

socket.send(json.dumps(request_obj))
response = json.loads(socket.recv())[1]
print response.keys()

d_len = len(response[TIMESTAMP])
print "sever responds with: {} data".format(d_len)
fn = '-'.join([STREAM_NAME, str(start)])+'.json'
print "saving data to file: `{}`".format(fn)
with open(fn, 'w') as outfile:
    json.dump(response, outfile)

dt_sec = float(max(response[TIMESTAMP]) - min(response[TIMESTAMP]))/2**32
d_rate = float(d_len)/dt_sec
print "client data production rate: {} 1/s".format(d_rate)

client_ts = np.array(response[TIMESTAMP])
server_ts = np.array(response['serv_ts'])
sub_ts = np.array(response['sub_ts'])

client_to_server = np.subtract(server_ts, client_ts)
client_to_sub = np.subtract(sub_ts, client_ts)
print "mean client to server latency: {}({}) ms".format(
        1000*np.mean(client_to_server)/2**32, 
        1000*np.std(client_to_server)/2**32
)
print "mean client to subscriber latency: {}({}) ms".format(
        1000*np.mean(client_to_sub)/2**32, 
        1000*np.std(client_to_sub)/2**32
)

