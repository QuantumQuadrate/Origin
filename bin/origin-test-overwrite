#!/usr/bin/env python

import sys
import os
import random
import time

# first find ourself
fullBinPath  = os.path.abspath(os.getcwd() + "/" + sys.argv[0])
fullBasePath = os.path.dirname(os.path.dirname(fullBinPath))
fullLibPath  = os.path.join(fullBasePath, "lib")
fullCfgPath  = os.path.join(fullBasePath, "config")
sys.path.append(fullLibPath)

from origin.client import server, random_data
from origin import current_time, TIMESTAMP

if len(sys.argv) > 1:
  if sys.argv[1] == 'test':
    configfile = os.path.join(fullCfgPath, "origin-server-test.cfg")
  else:
    configfile = os.path.join(fullCfgPath, sys.argv[1])
else:
  configfile = os.path.join(fullCfgPath, "origin-server.cfg")

import ConfigParser
config = ConfigParser.ConfigParser()
config.read(configfile)

# something that represents the connection to the server
serv = server(config)

# alert the server that we are going to be sending this type of data
connection = serv.registerStream(
    stream="overwriteTest",
    records={
        "toy1":"float",
        "toy2":"float",
        })

# just a proxy for actually doing something useful
def makeTempMeasurement():
    return random.random()

# This might need to be more complicated, but you get the gist. Keep sending records forever    
time.sleep(2)
for i in range(3):
    print "sending...."
    t1,t2 = (makeTempMeasurement(), makeTempMeasurement())
    data = { TIMESTAMP: current_time(config), "toy1": t1, "toy2": t2 }
    connection.send(**data)
    print("toy1: {}\ntoy2: {}".format(t1,t2))
    time.sleep(1)
connection.close()
time.sleep(2)

# make a different stream with the same name
connection = serv.registerStream(
    stream="overwriteTest",
    records={
        "toy1":"float",
        "toy2":"float",
        "toy3":"float",
        })
for i in range(3):
    print "sending...."
    t1,t2 = (makeTempMeasurement(), makeTempMeasurement())
    data = { 
            TIMESTAMP: current_time(config), 
            "toy1": t1, 
            "toy2": t2,
            "toy3": t2 
    }
    connection.send(**data)
    print("toy1: {}\ntoy2: {}".format(t1,t2))
    time.sleep(1)
connection.close()
